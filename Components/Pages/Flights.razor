@page "/flights"

<h1>Flight Finder</h1>

<div class="form-group">
    <label>From:</label>
    <select class="form-select" @bind="SelectedOrigin">
        <option value="Any">Any</option>
        @foreach (var airport in Airports)
        {
            <option value="@airport.Code">@airport.Name</option>
        }
    </select>
</div>

<div class="form-group">
    <label>To:</label>
    <select class="form-select" @bind="SelectedDestination">
        <option value="Any">Any</option>
        @foreach (var airport in Airports)
        {
            <option value="@airport.Code">@airport.Name</option>
        }
    </select>
</div>


<button class="btn btn-primary" @onclick="SearchFlight">Search</button>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (MatchingFlights.Any())
{
    <h2>Results</h2>
    <ul class="list-group">
        @foreach (var flight in MatchingFlights)
        {
            <li class="list-group-item">
                <strong>@flight.FlightCode</strong> - @flight.Airline
                <br />
                @GetAirportName(flight.Origin) → @GetAirportName(flight.Destination)
                <br />
                @flight.DayOfWeek at @flight.DepartureTime
                <br />
                Seats: @flight.SeatsAvailable | Cost: @flight.Cost.ToString("C")
            </li>
        }
    </ul>
}
else if (!string.IsNullOrEmpty(SearchedTerm))
{
    <p>No flights found.</p>
}

@code {
   
    private string SelectedOrigin = "Any";
    private string SelectedDestination = "Any";
    private string SelectedDay = "Any";
    private List<Flight> MatchingFlights = new();
    private bool IsLoading = false;
    private string SearchedTerm = "";

 
    private List<Airport> Airports = new();
    private List<Flight> Flight = new();

    protected override void OnInitialized()
    {
        
        Assignment2OOP2.Functionality.LoadAirports(Airports);
        Assignment2OOP2.Functionality.LoadFlights(Flight);
    }

    
    private async Task SearchFlight()
    {
        IsLoading = true;
        SearchedTerm = $"{SelectedOrigin}-{SelectedDestination}-{SelectedDay}";

        MatchingFlights = Flight.Where(f =>
            (SelectedOrigin == "Any" || f.Origin == SelectedOrigin) &&
            (SelectedDestination == "Any" || f.Destination == SelectedDestination) &&
            (SelectedDay == "Any" || f.DayOfWeek == SelectedDay)
        ).ToList();

        IsLoading = false;
    }

    private string GetAirportName(string code)
    {
        var airport = Airports.FirstOrDefault(a => a.Code == code);
        return airport != null ? airport.Name : "Unknown";
    }
}
