@page "/flights"
@inject DataManager DataManager

<h2>Flight Finder</h2>

<label>From: </label>
<input type="text" @bind="from" placeholder="Enter Origin" />

<label>To: </label>
<input type="text" @bind="to" placeholder="Enter Destination" />

<label>Day: </label>
<input type="text" @bind="day" placeholder="Enter Day" />

<button type="button" @onclick="SearchFlights">Find Flights</button>

<h2>Flights</h2>

@if (foundFlights.Count > 0)
{
    <ul>
        @foreach (var flight in foundFlights)
        {
            <li>@flight.FlightCode - @flight.Airline - @flight.DepartureTime</li>
        }
    </ul>
}
else
{
    <p>No flights found. Try different search criteria.</p>
}

@code {
    private string from = "";
    private string to = "";
    private string day = "";
    private List<Flight> flights = new List<Flight>();
    private List<Flight> foundFlights = new List<Flight>();

    protected override void OnInitialized()
    {
        // Load the flight data only once when the page is initialized
        Functionality.LoadFlights(flights);

        // Log the number of flights loaded to the console
        Console.WriteLine($"Loaded {flights.Count} flights.");

        // Just in case, check if some flights are actually loaded
        if (flights.Count == 0)
        {
            Console.WriteLine("No flights loaded.");
        }
    }

    void SearchFlights()
    {
        // Log the search criteria
        Console.WriteLine($"Searching for flights from: {from}, to: {to}, on: {day}");

        // Filter the flights based on the user input
        foundFlights = flights.Where(f =>
            (string.IsNullOrEmpty(from) || f.Origin.Contains(from, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(to) || f.Destination.Contains(to, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(day) || f.DayOfWeek.Contains(day, StringComparison.OrdinalIgnoreCase))
        ).ToList();

        // Log the number of flights found
        Console.WriteLine($"Found {foundFlights.Count} flights.");

        // Force UI update (This should trigger a UI re-render)
        StateHasChanged();
    }
}
